## *** Some useful k8s commands to help make a start ***
## *** I have set up an allias to to the following
## *** alias kubectl=microk8s.kubectl
## *** alias helm=microk8s.helm

# Start/stop microk8s
# microk8s.start
# microk8s.stop

# Enable/disable the bits that we need
# microk8s.enable dns dashboard storage helm
# microk8s.disable dns dashboard storage helm

# Apply/delete our manifest
# kubectl apply -f kubernetes-manifest.yaml -n dshop
# kubectl delete -n dshop -f kubernetes-manifest.yaml

# A couple of simple get commands
# kubectl get pods -n dshop
# kubectl get services -n dshop
# kubectl get configmaps -n dshop
# kubectl get ingress -n dshop
# kubectl get serviceaccounts -n dshop

# View the logs of a specific pod
# kubectl logs -n dshop customerservice-5856f5879f-qxxql

# Do some port forwarding on some of the services in order to access them
# kubectl port-forward -n kube-system service/kubernetes-dashboard 10443:443
# kubectl port-forward -n d-shop service/rabbitmq 15672:15672
# kubectl port-forward -n d-shop service/jaeger 16686:16686
# kubectl port-forward -n d-shop service/prometheus 9090:9090
# kubectl port-forward -n d-shop service/seq 5341:80

# Delete a pod and see the scheduler recreating it
# kubectl delete -n dshop pod customerservice-868fbf65b-4frzs

# deploy the nginx ingress controller helm chart
# helm install --name ingress stable/nginx-ingress
# helm delete --purge ingress

# deploy the wordpress helm chart
# helm install --name wordpress stable/wordpress
# helm delete --purge wordpress

# kubectl create namespace dshop
apiVersion: v1
kind: Namespace
metadata:
  name: dshop

##*****************************************************************************
##*****************************************************************************
##*************************** INFRASTRUCTURE **********************************
##*****************************************************************************
##*****************************************************************************

## *** rabbit mq ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
        ports:
        - containerPort: 5672
        - containerPort: 15672
        readinessProbe:
          httpGet:
            path : /
            port: 15672
          initialDelaySeconds: 60
          periodSeconds: 25
        livenessProbe:
          httpGet:
            path : /
            port: 15672
          initialDelaySeconds: 60
          periodSeconds: 25			  
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 140m
            memory: 500Mi
      volumes:
      - name: rabbitmq-data
        emptyDir: {}	
---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: rabbitmq
  ports:
   - name: http
     protocol: TCP
     port: 15672
     targetPort: 15672
   - name: amqp
     protocol: TCP
     port: 5672
     targetPort: 5672
---

## *** mongo db ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: mongo
        image: mongo:4
        volumeMounts:
        - mountPath: /data/db
          name: mongo-data		
        ports:
        - containerPort: 27017
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 27017
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 27017
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: mongo-data
        emptyDir: {}		
---

apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - name: mongo
    port: 27017
    targetPort: 27017
---

## *** redis cache ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: redis
        image: redis
        volumeMounts:
        - mountPath: /data
          name: redis-data		
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}		
---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---

## *** seq ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seq
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: seq
  template:
    metadata:
      labels:
        app: seq
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: seq
        image: datalust/seq
        env:
        - name: ACCEPT_EULA
          value: "Y"
        volumeMounts:
        - mountPath: /data
          name: seq-data  
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path : /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 25
        livenessProbe:
          httpGet:
            path : /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 25			
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: seq-data
        emptyDir: {}		
---

apiVersion: v1
kind: Service
metadata:
  name: seq
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: seq
  ports:
  - name: seq
    port: 80
    targetPort: 80
---

## *** jaeger ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one
        env:
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          value: "9411"		
        volumeMounts:
        - mountPath: /data
          name: jaeger-data		
        ports:
          - containerPort: 5775
            protocol: UDP
          - containerPort: 6831
            protocol: UDP
          - containerPort: 6832
            protocol: UDP
          - containerPort: 5778
            protocol: TCP
          - containerPort: 16686
            protocol: TCP
          - containerPort: 14268
            protocol: TCP
          - containerPort: 9411
            protocol: TCP
        readinessProbe:
          httpGet:
            path : /
            port: 16686
          initialDelaySeconds: 60
          periodSeconds: 25
        livenessProbe:
          httpGet:
            path : /
            port: 16686
          initialDelaySeconds: 60
          periodSeconds: 25				
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: jaeger-data
        emptyDir: {}		
---

apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: jaeger
  ports:
  - name: jaeger-query
    port: 16686
    protocol: TCP
    targetPort: 16686
  - name: jaeger-collector-http
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-collector-zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-configs
    port: 5778
    protocol: TCP
    targetPort: 5778
  - name: jaeger-udp-5775
    port: 5775
    protocol: UDP
    targetPort: 5775
  - name: jaeger-udp-6831
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: jaeger-udp-6832
    port: 6832
    protocol: UDP
    targetPort: 6832	
---

## *** prometheus ***
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: dshop
data:
  prometheus.yml: |-
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

      # Attach these labels to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
        monitor: 'codelab-monitor'

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first.rules"
      # - "second.rules"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label 'job=\<job_name\>' to any timeseries scraped from this config.
      - job_name: 'prometheus'
        static_configs:
          - targets: ['prometheus:9090']
      - job_name: 'api'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['apiservice:5000']
      - job_name: 'customers-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['customerservice:5001']
      - job_name: 'identity-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['identityservice:5002']
      - job_name: 'notification-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['notificationservice:5003']
      - job_name: 'operations-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['operationservice:5004']
      - job_name: 'orders-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['orderservice:5005']
      - job_name: 'products-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['productservice:5006']
      - job_name: 'signalr-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['signalrservice:5007']
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: prometheus
        image: prom/prometheus
        env:
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus/prometheus.yml
            subPath: prometheus.yml
        ports:
        - containerPort: 9090
        readinessProbe:
          httpGet:
            path : /
            port: 9090
          initialDelaySeconds: 60
          periodSeconds: 25
        livenessProbe:
          httpGet:
            path : /
            port: 9090
          initialDelaySeconds: 60
          periodSeconds: 25				
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
        - name: config-volume
          configMap:
           name: prometheus-server-conf
---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
  - name: prometheus
    port: 9090
    targetPort: 9090
---

## *** grafana ***
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: dshop
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        environment: dev
        version: v0.1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
      - name: grafana
        image: grafana/grafana
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-data		
        ports:
        - containerPort: 3000
        readinessProbe:
          httpGet:
            path : /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 25
        livenessProbe:
          httpGet:
            path : /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 25			
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: grafana-data
        emptyDir: {}		
---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
---


##*****************************************************************************
##*****************************************************************************
##****************************** APPLICATION **********************************
##*****************************************************************************
##*****************************************************************************


## *** api service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service
  namespace: dshop
  labels:
    account: apiservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiservice
  template:
    metadata:
      labels:
        app: apiservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: api-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest
      containers:
      - name: apiservice
        image: michaelgroenewald/k8s.dshop.api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: apiservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: apiservice
  ports:
  - name: http
    protocol: TCP
    port: 5000
    targetPort: 5000
---

## *** customer service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: customer-service
  namespace: dshop
  labels:
    account: customerservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: customerservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customerservice
  template:
    metadata:
      labels:
        app: customerservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: customer-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest
      containers:
      - name: customerservice
        image: michaelgroenewald/k8s.dshop.services.customers:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: customerservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: customerservice
  ports:
  - name: http
    protocol: TCP
    port: 5001
    targetPort: 5000
---

## *** identity service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: identity-service
  namespace: dshop
  labels:
    account: identityservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: identityservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: identityservice
  template:
    metadata:
      labels:
        app: identityservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: identity-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest
      containers:
      - name: identityservice
        image: michaelgroenewald/k8s.dshop.services.identity:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: identityservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: identityservice
  ports:
  - name: http
    protocol: TCP
    port: 5002
    targetPort: 5000
---

## *** notification service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: notification-service
  namespace: dshop
  labels:
    account: notificationservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: notificationservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notificationservice
  template:
    metadata:
      labels:
        app: notificationservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: notification-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest
      containers:
      - name: notificationservice
        image: michaelgroenewald/k8s.dshop.services.notifications:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: notificationservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: notificationservice
  ports:
  - name: http
    protocol: TCP
    port: 5003
    targetPort: 5000
---

## *** operations service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operations-service
  namespace: dshop
  labels:
    account: operationservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: operationservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: operationservice
  template:
    metadata:
      labels:
        app: operationservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: operations-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest
      containers:
      - name: operationservice
        image: michaelgroenewald/k8s.dshop.services.operations:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: operationservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: operationservice
  ports:
  - name: http
    protocol: TCP
    port: 5004
    targetPort: 5000
---

## *** order service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: order-service
  namespace: dshop
  labels:
    account: orderservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orderservice
  template:
    metadata:
      labels:
        app: orderservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: order-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest	  
      containers:
      - name: orderservice
        image: michaelgroenewald/k8s.dshop.services.orders:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: orderservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: orderservice
  ports:
  - name: http
    protocol: TCP
    port: 5005
    targetPort: 5000
---

## *** product service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: product-service
  namespace: dshop
  labels:
    account: productservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: productservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: productservice
  template:
    metadata:
      labels:
        app: productservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: product-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest	  
      containers:
      - name: productservice
        image: michaelgroenewald/k8s.dshop.services.products:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: productservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: productservice
  ports:
  - name: http
    protocol: TCP
    port: 5006
    targetPort: 5000
---

## *** signalr service ***
apiVersion: v1
kind: ServiceAccount
metadata:
  name: signalr-service
  namespace: dshop
  labels:
    account: signalrservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: signalrservice
  namespace: dshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: signalrservice
  template:
    metadata:
      labels:
        app: signalrservice
        environment: dev
        version: v0.1
    spec:
      serviceAccountName: signalr-service
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-rabbit
          image: michaelgroenewald/k8s.dshop.rabbit-ping:latest	  
      containers:
      - name: signalrservice
        image: michaelgroenewald/k8s.dshop.services.signalr:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "k8s"        
        readinessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path : /ping
            port: 5000
          initialDelaySeconds: 25
          periodSeconds: 15
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---

apiVersion: v1
kind: Service
metadata:
  name: signalrservice
  namespace: dshop
spec:
  type: ClusterIP
  selector:
    app: signalrservice
  ports:
  - name: http
    protocol: TCP
    port: 5007
    targetPort: 5000
---

##*****************************************************************************
##*****************************************************************************
##******************************** ACCESS *************************************
##*****************************************************************************
##*****************************************************************************

## LOAD BALANCERS

apiVersion: v1
kind: Service
metadata:
  name: apiservice-external
  namespace: dshop
spec:
  type: LoadBalancer
  selector:
    app: apiservice
  ports:
  - name: http
    port: 5000
    targetPort: 5000
---

apiVersion: v1
kind: Service
metadata:
  name: identityservice-external
  namespace: dshop
spec:
  type: LoadBalancer
  selector:
    app: identityservice
  ports:
  - name: http
    port: 5002
    targetPort: 5000
---

## INGRESS (using the helm deployed nginx-ingress chart)

# https://kubernetes.github.io/ingress-nginx/examples/
# https://github.com/nginxinc/kubernetes-ingress/tree/master/examples

# deploy the ingress controller
# helm install --name ingress stable/nginx-ingress
# helm delete --purge ingress

# KUBE_EDITOR="nano" kubectl edit -n ingress pod/nginx-ingress-microk8s-controller-6x696

# deploy the ingress resource
# This works but I am not an nginx guy so not sure why, need to figure this out at some point

#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: dshop-ingress
#  namespace: dshop
#  annotations:
#    kubernetes.io/ingress.class: nginx
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"    
#    nginx.ingress.kubernetes.io/rewrite-target: /$2
#spec:
#  rules:
#  - http:
#      paths:
#      - path: /api(/|$)(.*)
#        backend:
#          serviceName: apiservice
#          servicePort: 5000
#      - path: /identity(/|$)(.*)
#        backend:
#          serviceName: identityservice
#          servicePort: 5002
#---